(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{564:function(t,s,a){t.exports=a.p+"assets/img/hooks.d2e65f83.png"},600:function(t,s,a){"use strict";a.r(s);var e=a(59),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"react-hooks的那些事"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-hooks的那些事"}},[t._v("#")]),t._v(" react hooks的那些事")]),t._v(" "),e("p",[t._v("react hooks推出也有很长一段时间了, 我相信很多项目的代码里面都有着 "),e("code",[t._v("hooks")]),t._v(" 的身影.那么你在用的时候有没有问过自己, 为什么一个函数能记住状态?为什么 "),e("code",[t._v("hook")]),t._v(" 写在if else中会有 "),e("code",[t._v("warning")]),t._v(" ?下面我们来一点点的扒一扒 "),e("code",[t._v("hook")]),t._v(" 的实现原理.")]),t._v(" "),e("h2",{attrs:{id:"hooks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hooks"}},[t._v("#")]),t._v(" hooks")]),t._v(" "),e("p",[t._v("目前官方提供的 "),e("code",[t._v("hook")]),t._v(" 有下面几种:")]),t._v(" "),e("h3",{attrs:{id:"基础-hook"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础-hook"}},[t._v("#")]),t._v(" 基础 Hook")]),t._v(" "),e("ul",[e("li",[t._v("useState")]),t._v(" "),e("li",[t._v("useEffect")]),t._v(" "),e("li",[t._v("useContext")])]),t._v(" "),e("h3",{attrs:{id:"额外的-hook"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#额外的-hook"}},[t._v("#")]),t._v(" 额外的 Hook")]),t._v(" "),e("ul",[e("li",[t._v("useReducer")]),t._v(" "),e("li",[t._v("useCallback")]),t._v(" "),e("li",[t._v("useMemo")]),t._v(" "),e("li",[t._v("useRef")]),t._v(" "),e("li",[t._v("useImperativeHandle")]),t._v(" "),e("li",[t._v("useLayoutEffect")]),t._v(" "),e("li",[t._v("useDebugValue")])]),t._v(" "),e("p",[t._v("这些 "),e("code",[t._v("hook")]),t._v(" 的作用可以参阅"),e("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/hooks-reference.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网文档"),e("OutboundLink")],1),t._v(", 他们实现的功能不外乎这几种:")]),t._v(" "),e("ol",[e("li",[t._v("在函数中可以记住当前状态")]),t._v(" "),e("li",[t._v("实现缓存, 能够在整个生命周期内维持变量")]),t._v(" "),e("li",[t._v("一些副作用操作可以根据某些条件判断是否执行")]),t._v(" "),e("li",[t._v("实现了ref")])]),t._v(" "),e("p",[t._v("我们用的最多的可能就是前面两种, 那么他们到底是如何实现这些功能的呢? 不慌, 我们今天就来探究一下. 首先用过 "),e("code",[t._v("hooks")]),t._v(" 的人都知道, "),e("code",[t._v("hooks")]),t._v("有一个非常强要求的限制就是, 只能在函数顶层使用.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('React Hook "useState" is called conditionally. React Hooks must be called in the exact same order in every component render\n')])])]),e("p",[t._v("我相信很多人都看见过这句话, 这是你没有在函数顶层使用 "),e("code",[t._v("hook")]),t._v(" 的时候 "),e("code",[t._v("react")]),t._v(" 抛出的一个错误, 那为什么 "),e("code",[t._v("react")]),t._v(" 有这种限制呢?我们来看看 "),e("code",[t._v("react")]),t._v(" 第一次创建 "),e("code",[t._v("hook")]),t._v(" 时干了什么.")]),t._v(" "),e("h2",{attrs:{id:"hook的存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hook的存储"}},[t._v("#")]),t._v(" hook的存储")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mountMemo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nextCreate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" deps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mountWorkInProgressHook")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nextDeps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" deps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" deps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nextValue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextCreate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  hook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextDeps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nextValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[e("code",[t._v("react")]),t._v(" 在每个 "),e("code",[t._v("hook")]),t._v(" 第一次运行时, 总会有一句")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mountWorkInProgressHook")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("这个函数是在干嘛呢?")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mountWorkInProgressHook")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("memoizedState")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("baseState")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("baseQueue")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("queue")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("next")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//workInProgressHook 是当前最新生成的 hook")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgressHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is the first hook in the list")]),t._v("\n    currentlyRenderingFiber$1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgressHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Append to the end of the list")]),t._v("\n    workInProgressHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgressHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" workInProgressHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("可以看到, 它新声明了一个 "),e("code",[t._v("hook")]),t._v(" 对象, 里面各个值的含义我们暂且不去关心, 在后面的代码中, 先是判断了"),e("code",[t._v("workInprogressHook")]),t._v(" 是否为空, 这个字段其实是指向了一个最新生成的 "),e("code",[t._v("hook")]),t._v(" ,如果它为空, 证明我们是第一次生成 "),e("code",[t._v("hook")]),t._v(" , 我们就把生成的 "),e("code",[t._v("hook")]),t._v(" 赋值给 "),e("code",[t._v("workInProgressHook")]),t._v(" 和 "),e("code",[t._v("currentlyRenderingFiber\\$1.memoizedState")]),t._v(".（"),e("code",[t._v("currentlyRenderingFiber$1")]),t._v("是一个正在生成的 "),e("code",[t._v("FiberNode")]),t._v(" 对象）.而如果已经生成过 "),e("code",[t._v("hook")]),t._v(" 了, 那么我们就直接让当前 "),e("code",[t._v("hook")]),t._v(" 的 "),e("code",[t._v("next")]),t._v(" 等于下一个 "),e("code",[t._v("hook")]),t._v(" , 再修改 "),e("code",[t._v("workInprogressHook")]),t._v(" 为最新生成的 "),e("code",[t._v("hook")]),t._v(" .这是典型的链表结构.我们用一张图来理解一下:")]),t._v(" "),e("img",{attrs:{src:a(564)}}),t._v(" "),e("p",[t._v("我们知道 "),e("code",[t._v("react")]),t._v(" 更新了 "),e("code",[t._v("fiber")]),t._v(" 架构, 现在 "),e("code",[t._v("react")]),t._v(" 渲染的时候会生成一颗"),e("code",[t._v("fiber")]),t._v("树, 这颗树由很多个"),e("code",[t._v("FiberNode")]),t._v("结点组成."),e("code",[t._v("FiberNode")]),t._v(" 中有一个属性就叫做 "),e("code",[t._v("memoizedState")]),t._v(" .当然还有很多其他的属性, 为了排除干扰项我们就不列出来了.")]),t._v(" "),e("p",[e("strong",[t._v("注意:  "),e("code",[t._v("hook")]),t._v(" 的数据结构中也有一个 "),e("code",[t._v("memoizedState")]),t._v(", 这两个不是同一个东西, 大家不要搞混了.")])]),t._v(" "),e("p",[t._v("每个组件都会生成一个 "),e("code",[t._v("FiberNode")]),t._v(" .每个组件内使用的 "),e("code",[t._v("hook")]),t._v(" 会以链表的形式挂在 "),e("code",[t._v("FiberNode")]),t._v(" 的 "),e("code",[t._v("memoizedState")]),t._v(" 上面.而每个 "),e("code",[t._v("FiberNode")]),t._v(" 汇聚起来会变成一颗 "),e("code",[t._v("Fiber")]),t._v(" 树,  "),e("code",[t._v("React")]),t._v(" 每次会以固定的顺序遍历这棵树, 这样就把整个页面的 "),e("code",[t._v("hook")]),t._v(" 都串联起来了.")]),t._v(" "),e("p",[t._v("所以, "),e("code",[t._v("mountWorkInProgressHook")]),t._v(" 其实就是在做一个初始化的过程, 把  "),e("code",[t._v("hook")]),t._v(" 挂载到结点上去, 再返回这个 "),e("code",[t._v("hook")]),t._v(" .")]),t._v(" "),e("p",[t._v("ps: "),e("code",[t._v("FiberNode")]),t._v(" 也不只是单纯用这种单向的方式连接, 他们其实会有指向父结点和兄弟结点的指针, 同样为了减少干扰在此处没有表现出来.")]),t._v(" "),e("h2",{attrs:{id:"hook的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hook的使用"}},[t._v("#")]),t._v(" hook的使用")]),t._v(" "),e("p",[t._v("那么我们初始化 "),e("code",[t._v("hook")]),t._v(" 之后, 再次 "),e("code",[t._v("render")]),t._v(" 的时候会发生什么呢?")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateMemo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nextCreate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" deps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateWorkInProgressHook")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nextDeps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" deps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" deps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" prevState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("省略\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("我们会发现, 每次开头都有一句")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateWorkInProgressHook")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("那这个函数又是在干什么")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateWorkInProgressHook")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This function is used both for updates and for re-renders triggered by a")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// render phase update. It assumes there is either a current hook we can")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// clone, or a work-in-progress hook from a previous render pass that we can")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use as a base. When we reach the end of the base list, we must switch to")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the dispatcher used for mounts.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nextCurrentHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// currentHook: 已经生成的 fiber 树上的 hook, 第一次是空")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// currentlyRenderingFiber$1: 正在生成的 FiberNode 结点, alternate 上挂载的是上一次已经生成完的 fiber 结点")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以 current 就是上次生成的 FiberNode")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" current "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentlyRenderingFiber$1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我们之前说过 hooks 挂在 FiberNode 的 memoizedState 上, 这里拿到第一个 hook")]),t._v("\n      nextCurrentHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      nextCurrentHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不是第一次, 则证明已经拿到了 hook, 我们只需要用 next 就能找到下一个 hook")]),t._v("\n    nextCurrentHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nextWorkInProgressHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// workInProgressHook: 正在生成的 FiberNode 结点上的 hook, 第一次为空")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgressHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// currentlyRenderingFiber$1 是当前正在生成的 FiberNode")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以这里 nextWorkInProgressHook 的值就是当前正在遍历的 hook, 第一次让它等于 memoizedState")]),t._v("\n    nextWorkInProgressHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentlyRenderingFiber$1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不是第一次, 始终让它指向下一个 hook, 如果这是最后一个, 那么 nextWorkInProgressHook 就会是 null")]),t._v("\n    nextWorkInProgressHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgressHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextWorkInProgressHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// There's already a work-in-progress. Reuse it.")]),t._v("\n    workInProgressHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextWorkInProgressHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    nextWorkInProgressHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgressHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    currentHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextCurrentHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不存在的话会根据上一次的 hook 克隆一个新的 hook, 挂在新的链表、FiberNode上.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextCurrentHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Rendered more hooks than during the previous render."')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    currentHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextCurrentHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("memoizedState")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" currentHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("baseState")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" currentHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baseState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("baseQueue")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" currentHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baseQueue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("queue")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" currentHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("queue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("next")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgressHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is the first hook in the list.")]),t._v("\n      currentlyRenderingFiber$1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgressHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Append to the end of the list.")]),t._v("\n      workInProgressHook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgressHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" workInProgressHook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("我在代码中加了注释, 感兴趣的同学可以看看具体的代码, 下面我们大体解释一下这个函数干了什么.")]),t._v(" "),e("p",[t._v("当 "),e("code",[t._v("react")]),t._v(" 重新渲染时, 会生成一个新的 "),e("code",[t._v("fiber")]),t._v(" 树, 而这里会根据之前已经生成的 "),e("code",[t._v("FiberNode")]),t._v("  , 拿到之前的  "),e("code",[t._v("hook")]),t._v("  , 再复制一份到新的  "),e("code",[t._v("FiberNode")]),t._v("  上, 生成一个新的 "),e("code",[t._v("hooks")]),t._v(" 链表.")]),t._v(" "),e("p",[t._v("而这个  "),e("code",[t._v("hook")]),t._v(" 是怎么拿的?是去遍历 "),e("code",[t._v("hooks")]),t._v(" 链表拿的, 所以每次都会按顺序拿下一个 "),e("code",[t._v("hook")]),t._v(" , 然后复制到新的 "),e("code",[t._v("FiberNode")]),t._v(" 上.可以理解为这个 "),e("code",[t._v("updateWorkInProgressHook")]),t._v(" 每次都会按顺序返回下一个 "),e("code",[t._v("hook")]),t._v(" .")]),t._v(" "),e("p",[t._v("拿到这个 "),e("code",[t._v("hook")]),t._v(" 之后再根据我们 "),e("code",[t._v("setState")]),t._v(" 的值或者其他的一些东西去更新 "),e("code",[t._v("hook")]),t._v(" 对象上的属性.这一步也就是 "),e("code",[t._v("updateMemo")]),t._v(" 干的事情.")]),t._v(" "),e("h2",{attrs:{id:"hooks只能在顶层使用的原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hooks只能在顶层使用的原因"}},[t._v("#")]),t._v(" hooks只能在顶层使用的原因")]),t._v(" "),e("p",[t._v("其实看到这里你就应该明白为什么 "),e("code",[t._v("hooks")]),t._v(" 只能在顶层使用了, 因为它会按顺序去拿"),e("code",[t._v("hook")]),t._v(", "),e("code",[t._v("react")]),t._v("也是按顺序来区分不同的 "),e("code",[t._v("hook")]),t._v(" 的, 它默认你不会修改这个顺序.如果你没有在顶层使用 "),e("code",[t._v("hook")]),t._v(" , 打乱了每次 "),e("code",[t._v("hook")]),t._v(" 调用的顺序, 就会导致 "),e("code",[t._v("react")]),t._v(" 无法区分出对应的 "),e("code",[t._v("hook")]),t._v(" , 进而导致错误.那你说, 如果我不在顶层使用 "),e("code",[t._v("hooks")]),t._v(" , 但是我保证它每次都会被调用, 这样行不行?行, 但是为什么要给自己徒增烦恼去保证它每次都会被调用, 老老实实写在顶层不好吗?")]),t._v(" "),e("h2",{attrs:{id:"hooks-如何实现一个函数组件能够记住之前的状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hooks-如何实现一个函数组件能够记住之前的状态"}},[t._v("#")]),t._v(" hooks 如何实现一个函数组件能够记住之前的状态")]),t._v(" "),e("p",[t._v("我们知道, 一个函数重复运行的时候它的变量都会被销毁, 那 "),e("code",[t._v("react")]),t._v(" 为什么可以记住上次的变量?因为 "),e("code",[t._v("react")]),t._v(" 帮我们把这些变量存了下来.我们之前说到,  "),e("code",[t._v("hook")]),t._v(" 会以链表的形式被挂在 "),e("code",[t._v("FiberNode")]),t._v(" 的 "),e("code",[t._v("memoizedState")]),t._v(" 上, 你可以把  "),e("code",[t._v("FiberNode")]),t._v(" 理解为一个全局变量, 它并不会被销毁.所以我们下次 "),e("code",[t._v("render")]),t._v(" 的时候就能从这上面拿到上次的 "),e("code",[t._v("hook")]),t._v(" , 自然也能拿到 "),e("code",[t._v("hook")]),t._v(" 上携带的一些信息, 再根据这些信息去 "),e("code",[t._v("render")]),t._v(" 新的组件, 就能实现函数组件也能有自己的状态了.而 "),e("code",[t._v("useState")]),t._v(" , "),e("code",[t._v("useMemo")]),t._v(" , "),e("code",[t._v("useRef")]),t._v(" 这种带缓存效果的 "),e("code",[t._v("hooks")]),t._v(" 的实现原理也显而易见了, 我们看一个简单的 "),e("code",[t._v("useMemo")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mountMemo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nextCreate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" deps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mountWorkInProgressHook")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nextDeps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" deps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" deps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nextValue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextCreate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  hook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextDeps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nextValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("在生成的时候, 就是简单的调用了一下 "),e("code",[t._v("create")]),t._v(" 函数生成了初始值并返回.")]),t._v(" "),e("p",[t._v("而在更新的时候")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateMemo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nextCreate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" deps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateWorkInProgressHook")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nextDeps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" deps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" deps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" prevState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Assume these are defined. If they're not, areHookInputsEqual will warn.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextDeps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" prevDeps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("areHookInputsEqual")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextDeps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prevDeps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" prevState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nextValue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextCreate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  hook"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextDeps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nextValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("会判断一下我们的 "),e("code",[t._v("deps")]),t._v(" 依赖是否改变（这里最底层会使用 "),e("code",[t._v("Object.is")]),t._v(" 来判断是否相等）,如果改变了, 那么再调用一下我们传入的  "),e("code",[t._v("create")]),t._v(" 来返回最新的值, 如果没有改变, 那么就直接返回我们上次的值, 进而实现缓存的效果.")]),t._v(" "),e("p",[t._v("怎么拿到上次的 "),e("code",[t._v("hook")]),t._v(" ?就是通过我们之前说的"),e("code",[t._v("updateWorkInProgressHook")]),t._v(", 那怎么保证两次拿的 "),e("code",[t._v("hook")]),t._v(" 是同一个?这就是靠顺序保证了.")]),t._v(" "),e("h2",{attrs:{id:"结语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),e("p",[t._v("本文只是简单叙述了 "),e("code",[t._v("hooks")]),t._v(" 背后的实现方式, 并没有对每个 "),e("code",[t._v("hook")]),t._v(" 的具体实现方式做过多的阐述, 我相信大家在了解了基本原理之后再去看各个 "),e("code",[t._v("hook")]),t._v(" 的实现方式就会简单很多了.同时我后面也会再出一些关于具体 "),e("code",[t._v("hook")]),t._v(" 的实现方式解析, 和大家一起共同交流学习.")])])}),[],!1,null,null,null);s.default=n.exports}}]);